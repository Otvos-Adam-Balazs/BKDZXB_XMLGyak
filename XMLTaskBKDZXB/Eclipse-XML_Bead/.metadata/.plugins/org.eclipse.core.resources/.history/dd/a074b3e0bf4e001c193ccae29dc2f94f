package hu.domparse.bkdzxb;

import org.w3c.dom.*;
import org.xml.sax.SAXException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;
import java.io.*;


public class DOMModifyBKDZXB {
	 private static final String FILENAME = "XMLBKDZXB.xml";
	public static void main(String[] args) throws FileNotFoundException, IOException, ParserConfigurationException, SAXException, TransformerException {
		// TODO Auto-generated method stub
		// XML fájl meghívása
				File xmlFile = new File("XMLBKDZXB.xml");
				
				// Documentbuldier definiálása
				DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
				DocumentBuilder dBuilder = factory.newDocumentBuilder();
				
				// Fájl betöltése a Documentbuldierbe
				Document doc = dBuilder.parse(xmlFile);
				doc.getDocumentElement().normalize();
				
				// új veezetõ hozzáadása
				Element Vezetoseg = (Element)doc.getElementsByTagName("Vezetoseg").item(0);
				Vezetoseg.appendChild(createVezetoseg(doc, "k4.3","Kis Áron", "Egészségügyi vezetõ"));
				
				//Doc mentés
				SaveAsDoc(doc, "teszt.xml");
	
	}
	public static void SaveAsDoc(Document doc, String filename) throws TransformerException {
		TransformerFactory transformerFactory = TransformerFactory.newInstance();
		Transformer transf = transformerFactory.newTransformer();
		
		transf.setOutputProperty(OutputKeys.ENCODING, "UTF-8");
		transf.setOutputProperty(OutputKeys.INDENT, "yes");
		transf.setOutputProperty("{https://xml.apache.org/.xslt}indent-amount", "2");
		
		DOMSource source = new DOMSource(doc);
		
		File myFile = new File(filename);
		
		StreamResult console = new StreamResult(System.out);
		StreamResult file = new StreamResult(myFile);
		
		transf.transform(source, console);
		transf.transform(source, file);
	}
	
	private static Node createVezetoseg(Document doc, String Vkod, String Vtagok, String Vbeosztas) {
		
		Element user = doc.createElement("Vezetoseg");
		
		user.setAttribute("Vkod", Vkod);
		user.appendChild(createElement(doc, "Vtagok", Vtagok));
		user.appendChild(createElement(doc, "Vbeosztas", Vbeosztas));
		
		return user;
	}
	
	private static Node createElement(Document doc, String name, String value) {
		
		Element node = doc.createElement(name);
		node.appendChild(doc.createTextNode(value));
		
		return node;
	}
}

  

